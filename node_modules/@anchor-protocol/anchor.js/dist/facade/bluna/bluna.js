"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BLuna = void 0;
const terra_js_1 = require("@terra-money/terra.js");
const fabricators_1 = require("../../fabricators");
const queries_1 = require("../../queries");
const operation_1 = require("../operation");
class BLuna {
    constructor(lcd, addressProvider) {
        this._lcd = lcd;
        this._addressProvider = addressProvider;
    }
    mint(mintOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricatebAssetBond, mintOption, this._addressProvider);
    }
    burn(burnOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricatebAssetUnbond, burnOption, this._addressProvider);
    }
    instantBurn(instantiateBurnOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateExchangeSwapbLuna, instantiateBurnOption, this._addressProvider);
    }
    withdraw() {
        return new operation_1.OperationImpl(fabricators_1.fabricatebAssetWithdrawUnbonded, {}, this._addressProvider);
    }
    claim(claimOptions) {
        return new operation_1.OperationImpl(fabricators_1.fabricatebAssetClaimRewards, claimOptions, this._addressProvider);
    }
    getUnbondRequests(getUnbondRequestsOption) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, queries_1.queryHubUnbond)(Object.assign({ lcd: this._lcd }, getUnbondRequestsOption))(this._addressProvider);
        });
    }
    getClaimableRewards(getClaimableRewardsOption) {
        return __awaiter(this, void 0, void 0, function* () {
            const holder = yield (0, queries_1.queryRewardHolder)(Object.assign({ lcd: this._lcd }, getClaimableRewardsOption))(this._addressProvider);
            const rewardState = yield (0, queries_1.queryRewardState)({ lcd: this._lcd })(this._addressProvider);
            return new terra_js_1.Int(new terra_js_1.Int(holder.balance).mul(new terra_js_1.Dec(rewardState.global_index).sub(new terra_js_1.Dec(holder.index))))
                .add(new terra_js_1.Int(holder.pending_rewards))
                .div(1000000)
                .toString();
        });
    }
}
exports.BLuna = BLuna;
//# sourceMappingURL=bluna.js.map