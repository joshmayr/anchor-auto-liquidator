"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const terra_js_1 = require("@terra-money/terra.js");
const __1 = require("..");
const address_provider_1 = require("../address-provider");
const operation_1 = require("./operation");
const testFabricator = (option) => 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
(_) => {
    return [
        new terra_js_1.MsgExecuteContract(option.address, option.address, {
            [option.foo]: option.bar,
        }),
    ];
};
describe('operation', () => {
    it('generateWithAddress', () => __awaiter(void 0, void 0, void 0, function* () {
        const testKey = new terra_js_1.MnemonicKey();
        const testLCDClient = new terra_js_1.LCDClient({
            URL: 'https://lcd.terra.dev',
            chainID: 'columbus-5',
        });
        const testWallet = new terra_js_1.Wallet(testLCDClient, testKey);
        const addressProvider = new address_provider_1.AddressProviderFromJson(address_provider_1.columbus5);
        const operation = new operation_1.OperationImpl(testFabricator, {
            foo: 'hello',
            bar: addressProvider.market(__1.MARKET_DENOMS.UUSD),
        }, addressProvider);
        const expected = [
            new terra_js_1.MsgExecuteContract(testKey.accAddress, testKey.accAddress, {
                hello: addressProvider.market(__1.MARKET_DENOMS.UUSD),
            }),
        ];
        expect(operation.generateWithAddress(testKey.accAddress)).toStrictEqual(expected);
        expect(operation.generateWithWallet(testWallet)).toStrictEqual(expected);
        testWallet.createAndSignTx = ({ msgs }) => __awaiter(void 0, void 0, void 0, function* () {
            return Promise.resolve(new terra_js_1.Tx(new terra_js_1.TxBody(msgs), new terra_js_1.AuthInfo([], new terra_js_1.Fee(1, '1uluna')), []));
        });
        testLCDClient.tx.broadcast = (tx) => __awaiter(void 0, void 0, void 0, function* () {
            expect(tx.body.messages).toStrictEqual(expected);
            return Promise.resolve({
                txhash: 'hash',
                code: 0,
            });
        });
        yield operation.execute(testWallet);
    }));
});
//# sourceMappingURL=operation.test.js.map