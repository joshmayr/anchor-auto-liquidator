"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnchorToken = void 0;
const terra_js_1 = require("@terra-money/terra.js");
const address_provider_1 = require("../../address-provider");
const fabricators_1 = require("../../fabricators");
const queries_1 = require("../../queries");
const operation_1 = require("../operation");
class AnchorToken {
    constructor(lcd, addressProvider) {
        this._lcd = lcd;
        this._addressProvider = addressProvider;
    }
    claimUSTBorrowRewards(option) {
        return new operation_1.OperationImpl(fabricators_1.fabricateMarketClaimRewards, option, this._addressProvider);
    }
    claimLPRewards() {
        return new operation_1.OperationImpl(fabricators_1.fabricateStakingWithdraw, {}, this._addressProvider);
    }
    buyANC(ustAmount, slippageControl, to) {
        return new operation_1.OperationImpl(fabricators_1.fabricateExchangeSwapUSTANC, {
            amount: ustAmount,
            denom: address_provider_1.MARKET_DENOMS.UUSD,
            belief_price: slippageControl === null || slippageControl === void 0 ? void 0 : slippageControl.beliefPrice,
            max_spread: slippageControl === null || slippageControl === void 0 ? void 0 : slippageControl.maxSpread,
            to,
        }, this._addressProvider);
    }
    sellANC(tokenAmount, slippageControl, to) {
        return new operation_1.OperationImpl(fabricators_1.fabricateExchangeSwapANC, {
            amount: tokenAmount,
            to,
            belief_price: slippageControl === null || slippageControl === void 0 ? void 0 : slippageControl.beliefPrice,
            max_spread: slippageControl === null || slippageControl === void 0 ? void 0 : slippageControl.maxSpread,
        }, this._addressProvider);
    }
    provideLiquidity(option) {
        return new operation_1.OperationImpl(fabricators_1.fabricateExchangeProvideLiquidityANC, Object.assign(Object.assign({}, option), { quote: 'uusd' }), this._addressProvider);
    }
    withdrawLiquidity(tokenAmount) {
        return new operation_1.OperationImpl(fabricators_1.fabricateExchangeWithdrawLiquidityANC, {
            amount: tokenAmount,
        }, this._addressProvider);
    }
    stakeLP(lpTokenAmount) {
        return new operation_1.OperationImpl(fabricators_1.fabricateStakingBond, {
            amount: lpTokenAmount,
        }, this._addressProvider);
    }
    unstakeLP(unstakeAmount) {
        return new operation_1.OperationImpl(fabricators_1.fabricateStakingUnbond, {
            amount: unstakeAmount,
        }, this._addressProvider);
    }
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const balance = yield (0, queries_1.queryTokenBalance)({
                lcd: this._lcd,
                address,
                token_address: this._addressProvider.ANC(),
            })(this._addressProvider);
            return new terra_js_1.Dec(balance.balance).div(1000000).toString();
        });
    }
    getLPBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const balance = yield (0, queries_1.queryTokenBalance)({
                lcd: this._lcd,
                address,
                token_address: this._addressProvider.ancUstLPToken(),
            })(this._addressProvider);
            return new terra_js_1.Dec(balance.balance).div(1000000).toString();
        });
    }
    getProvidedLP(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const provided = yield (0, queries_1.queryStakingStaker)({
                lcd: this._lcd,
                staker: address,
            })(this._addressProvider);
            return new terra_js_1.Dec(provided.bond_amount).div(1000000).toString();
        });
    }
    getANCPrice() {
        return __awaiter(this, void 0, void 0, function* () {
            const poolInfo = yield (0, queries_1.queryExchangePool)({
                lcd: this._lcd,
                pair_contract_address: this._addressProvider.ancUstPair(),
            })(this._addressProvider);
            const anc = poolInfo.assets[0].amount;
            const uusd = poolInfo.assets[1].amount;
            return new terra_js_1.Dec(uusd).div(anc).toString();
        });
    }
    // gov related
    createPoll(createPollOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateGovCreatePoll, createPollOption, this._addressProvider);
    }
    castVote(castVoteOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateGovCastVote, castVoteOption, this._addressProvider);
    }
    endPoll(endPollOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateGovEndPoll, endPollOption, this._addressProvider);
    }
    executePoll(executePollOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateGovExecutePoll, executePollOption, this._addressProvider);
    }
    expirePoll(expirePollOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateGovExpirePoll, expirePollOption, this._addressProvider);
    }
    stakeVotingTokens(stakeVotingTokensOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateGovStakeVoting, stakeVotingTokensOption, this._addressProvider);
    }
    getGovState() {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, queries_1.queryGovState)({ lcd: this._lcd })(this._addressProvider);
        });
    }
    getStaker(option) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, queries_1.queryGovStaker)(Object.assign({ lcd: this._lcd }, option))(this._addressProvider);
        });
    }
    getPoll(option) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, queries_1.queryGovPoll)(Object.assign({ lcd: this._lcd }, option))(this._addressProvider);
        });
    }
    getPolls(option) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, queries_1.queryGovPolls)(Object.assign({ lcd: this._lcd }, option))(this._addressProvider);
        });
    }
}
exports.AnchorToken = AnchorToken;
//# sourceMappingURL=anchor-token.js.map