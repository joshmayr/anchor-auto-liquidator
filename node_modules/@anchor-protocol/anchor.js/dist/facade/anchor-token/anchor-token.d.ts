import { LCDClient } from '@terra-money/terra.js';
import { AddressProvider } from '../../address-provider';
import { fabricateGovCastVote, fabricateGovCreatePoll, fabricateGovEndPoll, fabricateGovExecutePoll, fabricateGovExpirePoll, fabricateGovStakeVoting, fabricateMarketClaimRewards, fabricateExchangeProvideLiquidityANC, OmitAddress, OmitLCD, OptionType } from '../../fabricators';
import { queryGovPoll, queryGovPolls, queryGovStaker, queryGovState } from '../../queries';
import { QueryOptionType, QueryResponseType } from '../../queries/types';
import { Operation } from '../operation';
import { SlippageToleranceConfig } from '../types';
export declare type AnchorTokenClaimUSTBorrowRewardsOption = OmitAddress<OptionType<typeof fabricateMarketClaimRewards>>;
export declare type AnchorTokenGovCreatePollOption = OmitAddress<OptionType<typeof fabricateGovCreatePoll>>;
export declare type AnchorTokenGovCastVoteOption = OmitAddress<OptionType<typeof fabricateGovCastVote>>;
export declare type AnchorTokenGovEndPollOption = OmitAddress<OptionType<typeof fabricateGovEndPoll>>;
export declare type AnchorTokenGovExecutePollOption = OmitAddress<OptionType<typeof fabricateGovExecutePoll>>;
export declare type AnchorTokenGovExpirePollOption = OmitAddress<OptionType<typeof fabricateGovExpirePoll>>;
export declare type AnchorTokenStakeVotingTokensOption = OmitAddress<OptionType<typeof fabricateGovStakeVoting>>;
export declare type AnchorTokenProvideLiquidityOption = OmitAddress<Omit<OptionType<typeof fabricateExchangeProvideLiquidityANC>, 'quote'>>;
export declare type AnchorTokenGetStakerOption = OmitLCD<QueryOptionType<typeof queryGovStaker>>;
export declare type AnchorTokenGetPollOption = OmitLCD<QueryOptionType<typeof queryGovPoll>>;
export declare type AnchorTokenGetPollsOption = OmitLCD<QueryOptionType<typeof queryGovPolls>>;
export declare class AnchorToken {
    private _lcd;
    private _addressProvider;
    constructor(lcd: LCDClient, addressProvider: AddressProvider);
    claimUSTBorrowRewards(option: AnchorTokenClaimUSTBorrowRewardsOption): Operation;
    claimLPRewards(): Operation;
    buyANC(ustAmount: string, slippageControl?: SlippageToleranceConfig, to?: string): Operation;
    sellANC(tokenAmount: string, slippageControl?: SlippageToleranceConfig, to?: string): Operation;
    provideLiquidity(option: AnchorTokenProvideLiquidityOption): Operation;
    withdrawLiquidity(tokenAmount: string): Operation;
    stakeLP(lpTokenAmount: string): Operation;
    unstakeLP(unstakeAmount: string): Operation;
    getBalance(address: string): Promise<string>;
    getLPBalance(address: string): Promise<string>;
    getProvidedLP(address: string): Promise<string>;
    getANCPrice(): Promise<string>;
    createPoll(createPollOption: AnchorTokenGovCreatePollOption): Operation;
    castVote(castVoteOption: AnchorTokenGovCastVoteOption): Operation;
    endPoll(endPollOption: AnchorTokenGovEndPollOption): Operation;
    executePoll(executePollOption: AnchorTokenGovExecutePollOption): Operation;
    expirePoll(expirePollOption: AnchorTokenGovExpirePollOption): Operation;
    stakeVotingTokens(stakeVotingTokensOption: AnchorTokenStakeVotingTokensOption): Operation;
    getGovState(): QueryResponseType<typeof queryGovState>;
    getStaker(option: AnchorTokenGetStakerOption): QueryResponseType<typeof queryGovStaker>;
    getPoll(option: AnchorTokenGetPollOption): QueryResponseType<typeof queryGovPoll>;
    getPolls(option: AnchorTokenGetPollsOption): QueryResponseType<typeof queryGovPolls>;
}
