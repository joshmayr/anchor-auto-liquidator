"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Earn = void 0;
const terra_js_1 = require("@terra-money/terra.js");
const fabricators_1 = require("../../fabricators");
const queries_1 = require("../../queries");
const operation_1 = require("../operation");
const constants_1 = require("../../constants");
class Earn {
    constructor(lcd, addressProvider) {
        this._lcd = lcd;
        this._addressProvider = addressProvider;
    }
    depositStable(depositStableOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateMarketDepositStableCoin, depositStableOption, this._addressProvider);
    }
    withdrawStable(withdrawStableOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateMarketRedeemStable, withdrawStableOption, this._addressProvider);
    }
    getTotalDeposit(getTotalDepositOption) {
        return __awaiter(this, void 0, void 0, function* () {
            const epochState = yield (0, queries_1.queryMarketEpochState)({
                lcd: this._lcd,
                market: getTotalDepositOption.market,
            })(this._addressProvider);
            const userATerraBalance = yield (0, queries_1.queryTokenBalance)({
                lcd: this._lcd,
                address: getTotalDepositOption.address,
                token_address: this._addressProvider.aTerra(getTotalDepositOption.market),
            })(this._addressProvider);
            return new terra_js_1.Int(new terra_js_1.Dec(epochState.exchange_rate).mul(userATerraBalance.balance))
                .div(1000000)
                .toString();
        });
    }
    getAPY(getAPYOption) {
        return __awaiter(this, void 0, void 0, function* () {
            const epochState = yield (0, queries_1.queryOverseerEpochState)(Object.assign({ lcd: this._lcd }, getAPYOption))(this._addressProvider);
            return new terra_js_1.Dec(epochState.deposit_rate).mul(constants_1.BLOCKS_PER_YEAR).toNumber();
        });
    }
}
exports.Earn = Earn;
//# sourceMappingURL=earn.js.map