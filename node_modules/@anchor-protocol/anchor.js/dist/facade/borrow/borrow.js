"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Borrow = void 0;
const terra_js_1 = require("@terra-money/terra.js");
const fabricators_1 = require("../../fabricators");
const queries_1 = require("../../queries");
const operation_1 = require("../operation");
class Borrow {
    constructor(lcd, addressProvider) {
        this._lcd = lcd;
        this._addressProvider = addressProvider;
    }
    borrow(borrowOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateMarketBorrow, borrowOption, this._addressProvider);
    }
    repay(repayOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateMarketRepay, repayOption, this._addressProvider);
    }
    provideCollateral(provideCollateralOptions) {
        return new operation_1.OperationImpl(fabricators_1.fabricateProvideCollateral, provideCollateralOptions, this._addressProvider);
    }
    withdrawCollateral(withdrawCollateralOption) {
        return new operation_1.OperationImpl(fabricators_1.fabricateRedeemCollateral, withdrawCollateralOption, this._addressProvider);
    }
    getCollateralValue(getCollateralValueOption) {
        return __awaiter(this, void 0, void 0, function* () {
            // only bLuna is supported now, and the below requests are only about bLuna
            const oraclePrice = yield (0, queries_1.queryOraclePrices)({ lcd: this._lcd, limit: 30 })(this._addressProvider);
            const collaterals = yield this.getCollaterals(getCollateralValueOption);
            if (collaterals.length === 1 && collaterals[0] === null) {
                return new terra_js_1.Dec(0).toString();
            }
            const total = collaterals.reduce((sum, collateral) => {
                const collateralPrice = oraclePrice.prices.find((p) => p.asset === collateral.collateral);
                if (!collateralPrice || new terra_js_1.Dec(collateralPrice.price).eq(0)) {
                    return sum;
                }
                return sum.add(new terra_js_1.Dec(collateral.balance).mul(collateralPrice.price));
            }, new terra_js_1.Dec(0));
            return total.div(1000000).toString();
        });
    }
    getCollaterals(getCollateralsOption) {
        return __awaiter(this, void 0, void 0, function* () {
            // get user balances of all COLLATERAL_DENOMS
            const whitelistedCollaterals = yield (0, queries_1.queryOverseerWhitelist)(Object.assign({ lcd: this._lcd }, getCollateralsOption))(this._addressProvider);
            const collateralDenoms = yield Promise.all(whitelistedCollaterals.elems
                .map((whitelist) => __awaiter(this, void 0, void 0, function* () {
                const userBalance = yield (0, queries_1.queryCustodyBorrower)(Object.assign(Object.assign({ lcd: this._lcd }, getCollateralsOption), { custody: getCollateralsOption.market }))(this._addressProvider);
                if (userBalance.balance === '0') {
                    return null;
                }
                return {
                    collateral: whitelist.collateral_token,
                    balance: new terra_js_1.Dec(userBalance.balance).toString(),
                };
            }))
                .filter(Boolean));
            return collateralDenoms;
        });
    }
    getBorrowedValue(getBorrowedValueOption) {
        return __awaiter(this, void 0, void 0, function* () {
            const { block } = yield this._lcd.tendermint.blockInfo();
            const loanAmount = yield (0, queries_1.queryMarketBorrowerInfo)({
                lcd: this._lcd,
                market: getBorrowedValueOption.market,
                borrower: getBorrowedValueOption.address,
                block_height: +block.header.height,
            })(this._addressProvider);
            return new terra_js_1.Dec(loanAmount.loan_amount).div(1000000).toString();
        });
    }
    getBorrowLimit(getBorrowLimitOption) {
        return __awaiter(this, void 0, void 0, function* () {
            const { block } = yield this._lcd.tendermint.blockInfo();
            const borrowLimitResponse = yield (0, queries_1.queryOverseerBorrowLimit)({
                lcd: this._lcd,
                overseer: getBorrowLimitOption.market,
                borrower: getBorrowLimitOption.address,
                block_time: +block.header.height,
            })(this._addressProvider);
            return new terra_js_1.Dec(borrowLimitResponse.borrow_limit).div(1000000).toString();
        });
    }
}
exports.Borrow = Borrow;
//# sourceMappingURL=borrow.js.map