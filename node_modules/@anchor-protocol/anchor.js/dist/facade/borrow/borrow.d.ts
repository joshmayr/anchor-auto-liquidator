import { LCDClient } from '@terra-money/terra.js';
import { AddressProvider, MARKET_DENOMS } from '../../address-provider';
import { fabricateMarketBorrow, fabricateMarketRepay, fabricateProvideCollateral, fabricateRedeemCollateral, OmitAddress, OptionType } from '../../fabricators';
import { Operation } from '../operation';
interface UserCollateral {
    collateral: string;
    balance: string;
}
export declare type BorrowBorrowOption = OmitAddress<OptionType<typeof fabricateMarketBorrow>>;
export declare type BorrowRepayOption = OmitAddress<OptionType<typeof fabricateMarketRepay>>;
export declare type BorrowProvideCollateralOption = OmitAddress<OptionType<typeof fabricateProvideCollateral>>;
export declare type BorrowWithdrawCollateralOption = OmitAddress<OptionType<typeof fabricateRedeemCollateral>>;
export interface BorrowQueriesOptions {
    market: MARKET_DENOMS;
    address: string;
}
export declare class Borrow {
    private _lcd;
    private _addressProvider;
    constructor(lcd: LCDClient, addressProvider: AddressProvider);
    borrow(borrowOption: BorrowBorrowOption): Operation;
    repay(repayOption: BorrowRepayOption): Operation;
    provideCollateral(provideCollateralOptions: BorrowProvideCollateralOption): Operation;
    withdrawCollateral(withdrawCollateralOption: BorrowWithdrawCollateralOption): Operation;
    getCollateralValue(getCollateralValueOption: BorrowQueriesOptions): Promise<string>;
    getCollaterals(getCollateralsOption: BorrowQueriesOptions): Promise<UserCollateral[]>;
    getBorrowedValue(getBorrowedValueOption: BorrowQueriesOptions): Promise<string>;
    getBorrowLimit(getBorrowLimitOption: BorrowQueriesOptions): Promise<string>;
}
export {};
