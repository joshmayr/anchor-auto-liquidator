"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_fabricator_1 = require("../utils/test-fabricators/test-fabricator");
const fabricators_1 = require("../fabricators");
const common_1 = require("./common");
const terra_js_1 = require("@terra-money/terra.js");
const create_hook_msg_1 = require("../utils/cw20/create-hook-msg");
const __1 = require("..");
/* eslint-disable */
describe('exchange<>anchor', () => {
    it('provide-liquidity-anc', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateExchangeProvideLiquidityANC, {
            address: 'address',
            slippage_tolerance: undefined,
            token_amount: '1000',
            native_amount: '1000',
            quote: 'uusd',
            expires: { never: {} },
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.ANC(), {
                increase_allowance: {
                    spender: common_1.addressProvider.ancUstPair(),
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    expires: { never: {} },
                },
            }),
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.ancUstPair(), {
                provide_liquidity: {
                    assets: [
                        {
                            info: {
                                token: {
                                    contract_addr: common_1.addressProvider.ANC(),
                                },
                            },
                            amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        },
                        {
                            info: {
                                native_token: {
                                    denom: __1.MARKET_DENOMS.UUSD,
                                },
                            },
                            amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        },
                    ],
                    slippage_tolerance: undefined,
                },
            }, { uusd: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString() }),
        ]);
    }));
    it('provide-liquidity-anc', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateExchangeProvideLiquiditybLuna, {
            address: 'address',
            slippage_tolerance: undefined,
            token_amount: '1000',
            native_amount: '1000',
            quote: 'uluna',
            expires: { never: {} },
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                increase_allowance: {
                    spender: common_1.addressProvider.bLunaLunaPair(),
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    expires: { never: {} },
                },
            }),
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaLunaPair(), {
                provide_liquidity: {
                    assets: [
                        {
                            info: {
                                token: {
                                    contract_addr: common_1.addressProvider.bLunaToken(),
                                },
                            },
                            amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        },
                        {
                            info: {
                                native_token: {
                                    denom: 'uluna',
                                },
                            },
                            amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        },
                    ],
                    slippage_tolerance: undefined,
                },
            }, { uluna: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString() }),
        ]);
    }));
    it('swap-ANC', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateExchangeSwapANC, {
            address: 'address',
            amount: '1000',
            to: 'recipient',
            belief_price: '10',
            max_spread: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.ANC(), {
                send: {
                    contract: common_1.addressProvider.ancUstPair(),
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    msg: (0, create_hook_msg_1.createHookMsg)({
                        swap: {
                            belief_price: '10',
                            max_spread: '1000',
                            to: 'recipient',
                        },
                    }),
                },
            }),
        ]);
    }));
    it('swap-bluna', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateExchangeSwapbLuna, {
            address: 'address',
            amount: '1000',
            to: 'recipient',
            belief_price: '10',
            max_spread: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                send: {
                    contract: common_1.addressProvider.bLunaLunaPair(),
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    msg: (0, create_hook_msg_1.createHookMsg)({
                        swap: {
                            belief_price: '10',
                            max_spread: '1000',
                            to: 'recipient',
                        },
                    }),
                },
            }),
        ]);
    }));
    it('swap-luna', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateExchangeSwapLuna, {
            address: 'address',
            amount: '1000',
            denom: 'uluna',
            to: 'recipient',
            belief_price: '10',
            max_spread: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaLunaPair(), {
                swap: {
                    offer_asset: {
                        info: {
                            native_token: {
                                denom: 'uluna',
                            },
                        },
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    },
                    belief_price: '10',
                    max_spread: '1000',
                    to: 'recipient',
                },
            }, { uluna: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString() }),
        ]);
    }));
    it('swap-usd-ANC', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateExchangeSwapUSTANC, {
            address: 'address',
            amount: '1000',
            denom: __1.MARKET_DENOMS.UUSD,
            to: 'recipient',
            belief_price: '10',
            max_spread: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.ancUstPair(), {
                swap: {
                    offer_asset: {
                        info: {
                            native_token: {
                                denom: __1.MARKET_DENOMS.UUSD,
                            },
                        },
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    },
                    belief_price: '10',
                    max_spread: '1000',
                    to: 'recipient',
                },
            }, { uusd: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString() }),
        ]);
    }));
    it('withdraw-liquidity', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateExchangeWithdrawLiquidityANC, {
            address: 'address',
            amount: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.ancUstLPToken(), {
                send: {
                    contract: common_1.addressProvider.ancUstPair(),
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    msg: (0, create_hook_msg_1.createHookMsg)({
                        withdraw_liquidity: {},
                    }),
                },
            }),
        ]);
    }));
    it('withdraw-liquidity', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateExchangeWithdrawLiquiditybLuna, {
            address: 'address',
            amount: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaLunaLPToken(), {
                send: {
                    contract: common_1.addressProvider.bLunaLunaPair(),
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    msg: (0, create_hook_msg_1.createHookMsg)({
                        withdraw_liquidity: {},
                    }),
                },
            }),
        ]);
    }));
});
//# sourceMappingURL=exchange-test.js.map