"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_fabricator_1 = require("../utils/test-fabricators/test-fabricator");
const common_1 = require("../__tests__/common");
const terra_js_1 = require("@terra-money/terra.js");
const fabricators_1 = require("../fabricators");
const address_provider_1 = require("../address-provider");
const create_hook_msg_1 = require("../utils/cw20/create-hook-msg");
/* eslint-disable */
describe('Money Market', () => {
    describe('Overseer', () => {
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOverseerUpdateConfig, {
                address: 'address',
                overseer: address_provider_1.MARKET_DENOMS.UUSD,
                owner_addr: 'owner',
                oracle_contract: 'oracle',
                liquidation_contract: 'liquidation',
                threshold_deposit_rate: '1.0',
                target_deposit_rate: '1.0',
                buffer_distribution_factor: '1.0',
                anc_purchase_factor: '0.00001',
                epoch_period: 124,
                price_timeframe: 60,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                    update_config: {
                        owner_addr: 'owner',
                        oracle_contract: 'oracle',
                        liquidation_contract: 'liquidation',
                        threshold_deposit_rate: '1.0',
                        target_deposit_rate: '1.0',
                        buffer_distribution_factor: '1.0',
                        anc_purchase_factor: '0.00001',
                        epoch_period: 124,
                        price_timeframe: 60,
                    },
                }),
            ]);
        }));
        it('execute-epoch-operations', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOverseerEpochOperations, {
                address: 'address',
                overseer: address_provider_1.MARKET_DENOMS.UUSD,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                    execute_epoch_operations: {},
                }),
            ]);
        }));
        it('liquidate-collateral', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOverseerLiquidateCollateral, {
                address: 'address',
                overseer: address_provider_1.MARKET_DENOMS.UUSD,
                borrower: 'borrower',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                    liquidate_collateral: {
                        borrower: 'borrower',
                    },
                }),
            ]);
        }));
        it('lock-collateral', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOverseerLockCollateral, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                    lock_collateral: {
                        collaterals: [
                            [
                                common_1.addressProvider.bLunaToken(),
                                new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                            ],
                        ],
                    },
                }),
            ]);
        }));
        it('unlock-collateral', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOverseerUnlockCollateral, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                    unlock_collateral: {
                        collaterals: [
                            [
                                common_1.addressProvider.bLunaToken(),
                                new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                            ],
                        ],
                    },
                }),
            ]);
        }));
        it('lock-beth-collateral', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOverseerLockBETHCollateral, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                    lock_collateral: {
                        collaterals: [
                            [
                                common_1.addressProvider.bEthToken(),
                                new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                            ],
                        ],
                    },
                }),
            ]);
        }));
        it('unlock-beth-collateral', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOverseerUnlockBETHCollateral, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                    unlock_collateral: {
                        collaterals: [
                            [
                                common_1.addressProvider.bEthToken(),
                                new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                            ],
                        ],
                    },
                }),
            ]);
        }));
        it('whitelist', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOverseerWhitelist, {
                address: 'address',
                overseer: address_provider_1.MARKET_DENOMS.UUSD,
                name: 'bAsset',
                symbol: 'BASSET',
                collateral_token: 'collateral',
                custody_contract: 'custody',
                max_ltv: '0.1',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                    whitelist: {
                        name: 'bAsset',
                        symbol: 'BASSET',
                        collateral_token: 'collateral',
                        custody_contract: 'custody',
                        max_ltv: '0.1',
                    },
                }),
            ]);
        }));
        it('update-whitelist', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOverseerUpdateWhitelist, {
                address: 'address',
                overseer: address_provider_1.MARKET_DENOMS.UUSD,
                collateral_token: 'collateral',
                custody_contract: 'custody',
                max_ltv: '0.1',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                    update_whitelist: {
                        collateral_token: 'collateral',
                        custody_contract: 'custody',
                        max_ltv: '0.1',
                    },
                }),
            ]);
        }));
    });
    describe('Market', () => {
        it('borrow-stable', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateMarketBorrow, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                amount: '1000',
                to: 'to',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.market(), {
                    borrow_stable: {
                        borrow_amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        to: 'to',
                    },
                }),
            ]);
        }));
        it('claim-rewards', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateMarketClaimRewards, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                to: undefined,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.market(), {
                    claim_rewards: {
                        to: undefined,
                    },
                }),
            ]);
        }));
        it('deposit-stable', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateMarketDepositStableCoin, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.market(), {
                    deposit_stable: {},
                }, { uusd: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString() }),
            ]);
        }));
        it('redeem-stable', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateMarketRedeemStable, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.aTerra(), {
                    send: {
                        contract: common_1.addressProvider.market(),
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        msg: (0, create_hook_msg_1.createHookMsg)({
                            redeem_stable: {},
                        }),
                    },
                }),
            ]);
        }));
        it('repay-stable', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateMarketRepay, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.market(), {
                    repay_stable: {},
                }, { uusd: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString() }),
            ]);
        }));
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateMarketUpdateConfig, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                owner_addr: 'owner',
                interest_model: 'interest',
                distribution_model: 'distribution',
                reserve_factor: '10',
                max_borrow_factor: '10',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.market(), {
                    update_config: {
                        owner_addr: 'owner',
                        interest_model: 'interest',
                        distribution_model: 'distribution',
                        reserve_factor: '10',
                        max_borrow_factor: '10',
                    },
                }),
            ]);
        }));
    });
    describe('custody-bluna', () => {
        it('deposit-collateral', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateCustodyDepositCollateral, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                collateral: address_provider_1.COLLATERAL_DENOMS.UBLUNA,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                    send: {
                        contract: common_1.addressProvider.custody(address_provider_1.MARKET_DENOMS.UUSD, address_provider_1.COLLATERAL_DENOMS.UBLUNA),
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        msg: (0, create_hook_msg_1.createHookMsg)({
                            deposit_collateral: {},
                        }),
                    },
                }),
            ]);
        }));
        it('withdraw-collateral', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateCustodyWithdrawCollateral, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                collateral: address_provider_1.COLLATERAL_DENOMS.UBLUNA,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.custody(address_provider_1.MARKET_DENOMS.UUSD, address_provider_1.COLLATERAL_DENOMS.UBLUNA), {
                    withdraw_collateral: {
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    },
                }),
            ]);
        }));
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateCustodyUpdateConfig, {
                address: 'address',
                owner: 'new-owner',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                collateral: address_provider_1.COLLATERAL_DENOMS.UBLUNA,
                liquidation_contract: 'liquidation',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.custody(address_provider_1.MARKET_DENOMS.UUSD, address_provider_1.COLLATERAL_DENOMS.UBLUNA), {
                    update_config: {
                        owner: 'new-owner',
                        liquidation_contract: 'liquidation',
                    },
                }),
            ]);
        }));
    });
    describe('custody-beth', () => {
        it('deposit-collateral', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateCustodyDepositCollateral, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                collateral: address_provider_1.COLLATERAL_DENOMS.UBETH,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bEthToken(), {
                    send: {
                        contract: common_1.addressProvider.custody(address_provider_1.MARKET_DENOMS.UUSD, address_provider_1.COLLATERAL_DENOMS.UBETH),
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        msg: (0, create_hook_msg_1.createHookMsg)({
                            deposit_collateral: {},
                        }),
                    },
                }),
            ]);
        }));
        it('withdraw-collateral', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateCustodyWithdrawCollateral, {
                address: 'address',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                collateral: address_provider_1.COLLATERAL_DENOMS.UBETH,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.custody(address_provider_1.MARKET_DENOMS.UUSD, address_provider_1.COLLATERAL_DENOMS.UBETH), {
                    withdraw_collateral: {
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    },
                }),
            ]);
        }));
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateCustodyUpdateConfig, {
                address: 'address',
                owner: 'new-owner',
                market: address_provider_1.MARKET_DENOMS.UUSD,
                collateral: address_provider_1.COLLATERAL_DENOMS.UBETH,
                liquidation_contract: 'liquidation',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.custody(address_provider_1.MARKET_DENOMS.UUSD, address_provider_1.COLLATERAL_DENOMS.UBETH), {
                    update_config: {
                        owner: 'new-owner',
                        liquidation_contract: 'liquidation',
                    },
                }),
            ]);
        }));
    });
    describe('interest-model', () => {
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateInterestUpdateConfig, {
                address: 'address',
                owner: 'new-owner',
                base_rate: '0.1000',
                interest_multiplier: '0.5555',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.interest(), {
                    update_config: {
                        owner: 'new-owner',
                        base_rate: '0.1000',
                        interest_multiplier: '0.5555',
                    },
                }),
            ]);
        }));
    });
    describe('distribution-model', () => {
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateDistributionUpdateConfig, {
                address: 'address',
                owner: 'new-owner',
                emission_cap: '1000.1',
                emission_floor: '1000.1',
                increment_multiplier: '100.566',
                decrement_multiplier: '10.1',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.interest(), {
                    update_config: {
                        owner: 'new-owner',
                        emission_cap: '1000.1',
                        emission_floor: '1000.1',
                        increment_multiplier: '100.566',
                        decrement_multiplier: '10.1',
                    },
                }),
            ]);
        }));
    });
    describe('oracle', () => {
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOracleUpdateConfig, {
                address: 'address',
                owner: 'new-owner',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.oracle(), {
                    update_config: {
                        owner: 'new-owner',
                    },
                }),
            ]);
        }));
        it('register-feeder', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOracleRegisterFeeder, {
                address: 'address',
                asset: 'bAsset',
                feeder: 'feeder',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.oracle(), {
                    register_feeder: {
                        asset: 'bAsset',
                        feeder: 'feeder',
                    },
                }),
            ]);
        }));
        it('feed-price', () => __awaiter(void 0, void 0, void 0, function* () {
            const pair = ['bLuna', '10.3'];
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateOracleFeedPrice, {
                address: 'address',
                prices: [pair],
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.oracle(), {
                    feed_price: {
                        prices: [['bLuna', '10.3']],
                    },
                }),
            ]);
        }));
    });
    describe('liquidation', () => {
        it('submit-bid', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateLiquidationSubmitBid, {
                address: 'address',
                collateral_token: common_1.addressProvider.bLunaToken(),
                premium_rate: '0.3',
                denom: address_provider_1.MARKET_DENOMS.UUSD,
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.liquidation(), {
                    submit_bid: {
                        collateral_token: common_1.addressProvider.bLunaToken(),
                        premium_rate: '0.3',
                    },
                }, { uusd: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString() }),
            ]);
        }));
        it('retract-bid', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateLiquidationRetractBid, {
                address: 'address',
                collateral_token: common_1.addressProvider.bLunaToken(),
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.liquidation(), {
                    retract_bid: {
                        collateral_token: common_1.addressProvider.bLunaToken(),
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    },
                }),
            ]);
        }));
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateLiquidationUpdateConfig, {
                address: 'address',
                owner: 'owner',
                oracle_contract: 'oracle_contract',
                stable_denom: 'stable_denom',
                safe_ratio: 'safe_ratio',
                bid_fee: '0.1',
                max_premium_rate: '0.1',
                liquidation_threshold: '01',
                price_timeframe: 60,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.liquidation(), {
                    update_config: {
                        owner: 'owner',
                        oracle_contract: 'oracle_contract',
                        stable_denom: 'stable_denom',
                        safe_ratio: 'safe_ratio',
                        bid_fee: '0.1',
                        max_premium_rate: '0.1',
                        liquidation_threshold: '01',
                        price_timeframe: 60,
                    },
                }),
            ]);
        }));
    });
    describe('liquidation-queue', () => {
        it('submit-bid', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateLiquidationQueueSubmitBid, {
                address: 'address',
                collateral_token: common_1.addressProvider.bLunaToken(),
                premium_slot: 3,
                amount: '1000',
                denom: address_provider_1.MARKET_DENOMS.UUSD,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.liquidationQueue(), {
                    submit_bid: {
                        collateral_token: common_1.addressProvider.bLunaToken(),
                        premium_slot: 3,
                    },
                }, { uusd: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString() }),
            ]);
        }));
        it('retract-bid', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateLiquidationQueueRetractBid, {
                address: 'address',
                bid_idx: '10',
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.liquidationQueue(), {
                    retract_bid: {
                        bid_idx: '10',
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    },
                }),
            ]);
        }));
        it('active-bids', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateLiquidationQueueActiveBids, {
                address: 'address',
                bids_idx: undefined,
                collateral_token: common_1.addressProvider.bLunaToken(),
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.liquidationQueue(), {
                    active_bids: {
                        bids_idx: undefined,
                        collateral_token: common_1.addressProvider.bLunaToken(),
                    },
                }),
            ]);
        }));
        it('active-bids', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateLiquidationQueueClaimLiquidation, {
                address: 'address',
                bids_idx: undefined,
                collateral_token: common_1.addressProvider.bLunaToken(),
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.liquidationQueue(), {
                    claim_liquidation: {
                        bids_idx: undefined,
                        collateral_token: common_1.addressProvider.bLunaToken(),
                    },
                }),
            ]);
        }));
    });
    it('provide-liquidity', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateProvideCollateral, {
            address: 'address',
            collateral: address_provider_1.COLLATERAL_DENOMS.UBLUNA,
            market: address_provider_1.MARKET_DENOMS.UUSD,
            amount: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                send: {
                    contract: common_1.addressProvider.custody(address_provider_1.MARKET_DENOMS.UUSD, address_provider_1.COLLATERAL_DENOMS.UBLUNA),
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    msg: (0, create_hook_msg_1.createHookMsg)({
                        deposit_collateral: {},
                    }),
                },
            }),
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                lock_collateral: {
                    collaterals: [
                        [
                            common_1.addressProvider.bLunaToken(),
                            new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        ],
                    ],
                },
            }),
        ]);
    }));
    it('redeem-collateral', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateRedeemCollateral, {
            address: 'address',
            collateral: address_provider_1.COLLATERAL_DENOMS.UBLUNA,
            market: address_provider_1.MARKET_DENOMS.UUSD,
            amount: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.overseer(), {
                unlock_collateral: {
                    collaterals: [
                        [
                            common_1.addressProvider.bLunaToken(),
                            new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        ],
                    ],
                },
            }),
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.custody(address_provider_1.MARKET_DENOMS.UUSD, address_provider_1.COLLATERAL_DENOMS.UBLUNA), {
                withdraw_collateral: {
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                },
            }),
        ]);
    }));
});
//# sourceMappingURL=anchor-money-market-test.js.map