"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const terra_js_1 = require("@terra-money/terra.js");
const test_fabricator_1 = require("./../utils/test-fabricators/test-fabricator");
const fabricators_1 = require("../fabricators");
const create_hook_msg_1 = require("../utils/cw20/create-hook-msg");
const common_1 = require("../__tests__/common");
const __1 = require("..");
/* eslint-disable */
describe('Anchor Token', () => {
    describe('Airdrop', () => {
        it('claim', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateAirdropClaim, {
                address: 'address',
                stage: 1,
                amount: '100000',
                proof: ['terra1', 'terra2'],
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.airdrop(), {
                    claim: { stage: 1, amount: '100000', proof: ['terra1', 'terra2'] },
                }),
            ]);
        }));
        it('register-merkel-root', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateAirdropRegisterMerkleRoot, {
                address: 'address',
                merkle_root: 'root',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.airdrop(), {
                    register_merkle_root: { merkle_root: 'root' },
                }),
            ]);
        }));
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateAirdropUpdateConfig, {
                address: 'address',
                owner: 'new_owner',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.airdrop(), {
                    update_config: { owner: 'new_owner' },
                }),
            ]);
        }));
    });
    describe('collector', () => {
        it('sweep', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateCollectorSweep, {
                address: 'address',
                denom: __1.MARKET_DENOMS.UUSD,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.collector(), {
                    sweep: { denom: __1.MARKET_DENOMS.UUSD },
                }),
            ]);
        }));
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateCollectorUpdateConfig, {
                address: 'address',
                reward_factor: '2.0',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.collector(), {
                    update_config: { reward_factor: '2.0' },
                }),
            ]);
        }));
    });
    describe('community', () => {
        it('spend', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateCommunitySpend, {
                address: 'address',
                recipient: 'recipient',
                amount: '10000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.community(), {
                    spend: {
                        recipient: 'recipient',
                        amount: new terra_js_1.Int(new terra_js_1.Dec('10000').mul(1000000)).toString(),
                    },
                }),
            ]);
        }));
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateCommunityUpdateConfig, {
                address: 'address',
                spend_limit: '10000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.community(), {
                    update_config: {
                        spend_limit: '10000',
                    },
                }),
            ]);
        }));
    });
    describe('distributor', () => {
        it('spend ', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateDistributorSpend, {
                address: 'address',
                recipient: 'recipient',
                amount: '10000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.distributor(), {
                    spend: {
                        recipient: 'recipient',
                        amount: new terra_js_1.Int(new terra_js_1.Dec('10000').mul(1000000)).toString(),
                    },
                }),
            ]);
        }));
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateDistributorUpdateConfig, {
                address: 'address',
                spend_limit: '10000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.distributor(), {
                    update_config: {
                        spend_limit: '10000',
                    },
                }),
            ]);
        }));
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateDistributorUpdateConfig, {
                address: 'address',
                spend_limit: '10000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.distributor(), {
                    update_config: {
                        spend_limit: '10000',
                    },
                }),
            ]);
        }));
        it('add-distributor', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateDistributorAddDistributor, {
                address: 'address',
                distributor: 'distributor',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.distributor(), {
                    add_distributor: {
                        distributor: 'distributor',
                    },
                }),
            ]);
        }));
        it('remove-distributor', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateDistributorRemoveDistributor, {
                address: 'address',
                distributor: 'distributor',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.distributor(), {
                    remove_distributor: {
                        distributor: 'distributor',
                    },
                }),
            ]);
        }));
    });
    describe('gov', () => {
        it('cast-vote', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateGovCastVote, {
                address: 'address',
                poll_id: 1,
                vote: 'yes',
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.gov(), {
                    cast_vote: {
                        poll_id: 1,
                        vote: 'yes',
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    },
                }),
            ]);
        }));
        it('create-poll', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateGovCreatePoll, {
                address: 'address',
                amount: '1000',
                title: 'poll1',
                description: 'no description',
                link: 'www.poll1.com',
                execute_message: undefined,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.ANC(), {
                    send: {
                        contract: common_1.addressProvider.gov(),
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        msg: (0, create_hook_msg_1.createHookMsg)({
                            create_poll: {
                                title: 'poll1',
                                description: 'no description',
                                link: 'www.poll1.com',
                                execute_message: undefined,
                            },
                        }),
                    },
                }),
            ]);
        }));
        it('stake-voting-tokens', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateGovStakeVoting, {
                address: 'address',
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.ANC(), {
                    send: {
                        contract: common_1.addressProvider.gov(),
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        msg: (0, create_hook_msg_1.createHookMsg)({
                            stake_voting_tokens: {},
                        }),
                    },
                }),
            ]);
        }));
        it('withdraw-voting-tokens', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateGovWithdrawVotingTokens, {
                address: 'address',
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.gov(), {
                    withdraw_voting_tokens: {
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    },
                }),
            ]);
        }));
        it('end-poll', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateGovEndPoll, {
                address: 'address',
                poll_id: 1,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.gov(), {
                    end_poll: {
                        poll_id: 1,
                    },
                }),
            ]);
        }));
        it('execute-poll', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateGovExecutePoll, {
                address: 'address',
                poll_id: 1,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.gov(), {
                    execute_poll: {
                        poll_id: 1,
                    },
                }),
            ]);
        }));
        it('expire-poll', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateGovExpirePoll, {
                address: 'address',
                poll_id: 1,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.gov(), {
                    expire_poll: {
                        poll_id: 1,
                    },
                }),
            ]);
        }));
        it('snapshot-poll', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateGovSnapshotPoll, {
                address: 'address',
                poll_id: 1,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.gov(), {
                    snapshot_poll: {
                        poll_id: 1,
                    },
                }),
            ]);
        }));
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateGovUpdateConfig, {
                address: 'address',
                owner: 'a',
                quorum: '0.1',
                threshold: '0.2',
                voting_period: 123,
                timelock_period: 145,
                expiration_period: 145,
                proposal_deposit: '10000',
                snapshot_period: 1000,
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.gov(), {
                    update_config: {
                        owner: 'a',
                        quorum: '0.1',
                        threshold: '0.2',
                        voting_period: 123,
                        timelock_period: 145,
                        expiration_period: 145,
                        proposal_deposit: '10000',
                        snapshot_period: 1000,
                    },
                }),
            ]);
        }));
    });
    describe('staking', () => {
        it('bond ', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateStakingBond, {
                address: 'address',
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.ancUstLPToken(), {
                    send: {
                        contract: common_1.addressProvider.staking(),
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                        msg: (0, create_hook_msg_1.createHookMsg)({
                            bond: {},
                        }),
                    },
                }),
            ]);
        }));
        it('unbond ', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateStakingUnbond, {
                address: 'address',
                amount: '1000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.staking(), {
                    unbond: {
                        amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    },
                }),
            ]);
        }));
        it('withdraw ', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateStakingWithdraw, {
                address: 'address',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.staking(), {
                    withdraw: {},
                }),
            ]);
        }));
    });
    describe('investor-vesting', () => {
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateInvestorVestingUpdateConfig, {
                address: 'address',
                owner: 'new-owner',
                anchor_token: 'token',
                genesis_time: '100000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.investorLock(), {
                    update_config: {
                        owner: 'new-owner',
                        anchor_token: 'token',
                        genesis_time: '100000',
                    },
                }),
            ]);
        }));
        it('register-vesting-accounts', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateInvestorVestingRegisterAccounts, {
                address: 'address',
                vesting_accounts: ['address1', 'address2'],
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.investorLock(), {
                    register_vesting_accounts: {
                        vesting_accounts: ['address1', 'address2'],
                    },
                }),
            ]);
        }));
        it('claim', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateInvestorVestingClaim, {
                address: 'address',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.investorLock(), {
                    claim: {},
                }),
            ]);
        }));
    });
    describe('team-vesting', () => {
        it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateTeamVestingUpdateConfig, {
                address: 'address',
                owner: 'new-owner',
                anchor_token: 'token',
                genesis_time: '100000',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.teamLock(), {
                    update_config: {
                        owner: 'new-owner',
                        anchor_token: 'token',
                        genesis_time: '100000',
                    },
                }),
            ]);
        }));
        it('register-vesting-accounts', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateTeamVestingRegisterAccounts, {
                address: 'address',
                vesting_accounts: ['address1', 'address2'],
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.teamLock(), {
                    register_vesting_accounts: {
                        vesting_accounts: ['address1', 'address2'],
                    },
                }),
            ]);
        }));
        it('claim', () => __awaiter(void 0, void 0, void 0, function* () {
            (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricateTeamVestingClaim, {
                address: 'address',
            }, common_1.addressProvider, [
                new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.teamLock(), {
                    claim: {},
                }),
            ]);
        }));
    });
});
//# sourceMappingURL=anchor-token-test.js.map