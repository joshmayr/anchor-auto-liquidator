"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_fabricator_1 = require("../utils/test-fabricators/test-fabricator");
const fabricators_1 = require("../fabricators");
const terra_js_1 = require("@terra-money/terra.js");
const create_hook_msg_1 = require("../utils/cw20/create-hook-msg");
const common_1 = require("../__tests__/common");
/* eslint-disable */
describe('bLuna', () => {
    it('bond ', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetBond, {
            address: 'address',
            amount: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaHub(), {
                bond: {},
            }, { uluna: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString() }),
        ]);
    }));
    it('update-global-index', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetUpdateGlobalIndex, {
            address: 'address',
            airdrop_hooks: undefined,
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaHub(), {
                update_global_index: { airdrop_hooks: undefined },
            }),
        ]);
    }));
    it('withdraw_unbonded', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetWithdrawUnbonded, {
            address: 'address',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaHub(), {
                withdraw_unbonded: {},
            }),
        ]);
    }));
    it('register-validator', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetRegisterValidator, {
            address: 'address',
            validator: 'validator',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaHub(), {
                register_validator: { validator: 'validator' },
            }),
        ]);
    }));
    it('deregister-validator', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetDeregisterValidator, {
            address: 'address',
            validator: 'validator',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaHub(), {
                deregister_validator: { validator: 'validator' },
            }),
        ]);
    }));
    it('check-slashing', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetCheckSlashing, {
            address: 'address',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaHub(), {
                check_slashing: {},
            }),
        ]);
    }));
    it('update-params', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetUpdateParams, {
            address: 'address',
            epoch_period: 111111,
            unbonding_period: 111111,
            peg_recovery_fee: '0.5',
            er_threshold: '1.0',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaHub(), {
                update_params: {
                    epoch_period: 111111,
                    unbonding_period: 111111,
                    peg_recovery_fee: '0.5',
                    er_threshold: '1.0',
                },
            }),
        ]);
    }));
    it('update-config', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetUpdateConfig, {
            address: 'address',
            owner: 'new-owner',
            reward_contract: 'reward',
            token_contract: 'token',
            airdrop_registry_contract: 'airdrop',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaHub(), {
                update_config: {
                    owner: 'new-owner',
                    reward_contract: 'reward',
                    token_contract: 'token',
                    airdrop_registry_contract: 'airdrop',
                },
            }),
        ]);
    }));
    it('unbond', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetUnbond, {
            address: 'address',
            amount: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                send: {
                    contract: common_1.addressProvider.bLunaHub(),
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    msg: (0, create_hook_msg_1.createHookMsg)({
                        unbond: {},
                    }),
                },
            }),
        ]);
    }));
    it('claim-rewards', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetClaimRewards, {
            address: 'address',
            recipient: undefined,
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaReward(), {
                claim_rewards: { recipient: undefined },
            }),
        ]);
    }));
    it('transfer', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetTransfer, {
            address: 'address',
            amount: '1000',
            recipient: 'recipient',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                transfer: {
                    recipient: 'recipient',
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                },
            }),
        ]);
    }));
    it('transfer-from', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetTransferFrom, {
            address: 'address',
            owner: 'owner',
            amount: '1000',
            recipient: 'recipient',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                transfer_from: {
                    owner: 'owner',
                    recipient: 'recipient',
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                },
            }),
        ]);
    }));
    it('burn', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetBurn, {
            address: 'address',
            amount: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                burn: {
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                },
            }),
        ]);
    }));
    it('burn-from', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetBurnFrom, {
            address: 'address',
            owner: 'owner',
            amount: '1000',
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                burn_from: {
                    owner: 'owner',
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                },
            }),
        ]);
    }));
    it('send', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetSend, {
            address: 'address',
            amount: '1000',
            contract: 'contract',
            msg: { msg: {} },
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                send: {
                    contract: 'contract',
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    msg: (0, create_hook_msg_1.createHookMsg)({ msg: {} }),
                },
            }),
        ]);
    }));
    it('send-from', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetSendFrom, {
            address: 'address',
            amount: '1000',
            owner: 'owner',
            contract: 'contract',
            msg: { msg: {} },
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                send_from: {
                    owner: 'owner',
                    contract: 'contract',
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    msg: (0, create_hook_msg_1.createHookMsg)({ msg: {} }),
                },
            }),
        ]);
    }));
    it('increase-allowance', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetIncreaseAllowance, {
            address: 'address',
            amount: '1000',
            spender: 'spender',
            expires: { never: {} },
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                increase_allowance: {
                    spender: 'spender',
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    expires: { never: {} },
                },
            }),
        ]);
    }));
    it('decrease-allowance', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, test_fabricator_1.testFabricator)(expect, fabricators_1.fabricatebAssetDecreaseAllowance, {
            address: 'address',
            amount: '1000',
            spender: 'spender',
            expires: { never: {} },
        }, common_1.addressProvider, [
            new terra_js_1.MsgExecuteContract('address', common_1.addressProvider.bLunaToken(), {
                decrease_allowance: {
                    spender: 'spender',
                    amount: new terra_js_1.Int(new terra_js_1.Dec('1000').mul(1000000)).toString(),
                    expires: { never: {} },
                },
            }),
        ]);
    }));
});
//# sourceMappingURL=anchor-bAsset-test.js.map