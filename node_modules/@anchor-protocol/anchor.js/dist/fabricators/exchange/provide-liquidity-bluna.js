"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fabricateExchangeProvideLiquiditybLuna = void 0;
const terra_js_1 = require("@terra-money/terra.js");
const validate_input_1 = require("../../utils/validate-input");
const address_1 = require("../../utils/validation/address");
const number_1 = require("../../utils/validation/number");
const fabricateExchangeProvideLiquiditybLuna = ({ address, slippage_tolerance, token_amount, native_amount, quote, expires, }) => (addressProvider) => {
    (0, validate_input_1.validateInput)([
        (0, address_1.validateAddress)(address),
        (0, number_1.validateIsGreaterThanZero)(token_amount),
        (0, number_1.validateIsGreaterThanZero)(native_amount),
    ]);
    const pairAddress = addressProvider.bLunaLunaPair();
    const tokenAddress = addressProvider.bLunaToken();
    const coins = new terra_js_1.Coins([
        new terra_js_1.Coin(quote, new terra_js_1.Int(new terra_js_1.Dec(native_amount).mul(1000000)).toString()),
    ]);
    return [
        new terra_js_1.MsgExecuteContract(address, tokenAddress, {
            increase_allowance: {
                spender: pairAddress,
                amount: new terra_js_1.Int(new terra_js_1.Dec(token_amount).mul(1000000)).toString(),
                expires: expires || { never: {} },
            },
        }),
        new terra_js_1.MsgExecuteContract(address, pairAddress, {
            provide_liquidity: {
                assets: [
                    {
                        info: {
                            token: {
                                contract_addr: tokenAddress,
                            },
                        },
                        amount: new terra_js_1.Int(new terra_js_1.Dec(token_amount).mul(1000000)).toString(),
                    },
                    {
                        info: {
                            native_token: {
                                denom: quote,
                            },
                        },
                        amount: new terra_js_1.Int(new terra_js_1.Dec(native_amount).mul(1000000)).toString(),
                    },
                ],
                slippage_tolerance: slippage_tolerance
                    ? slippage_tolerance
                    : undefined,
            },
        }, coins),
    ];
};
exports.fabricateExchangeProvideLiquiditybLuna = fabricateExchangeProvideLiquiditybLuna;
//# sourceMappingURL=provide-liquidity-bluna.js.map